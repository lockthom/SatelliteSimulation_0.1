This is a list of tasks that I'm writing in a text file so that it's easier to remember what I can work on if I forget other components or I finish something and need another direction to take. 

MATLAB Component:

- 3D Representation COMPLETE
- 3D Arbitrary attitude COMPLETE
- RK Stepping COMPLETE
- RKM Stepping COMPLETE
- ode45 Stepping COMPLETE
- Basic satellite kinematics w/ quaternions COMPLETE
- Representation of satellite kinematics in 3D COMPLETE
- Implementation of basic kinetics COMPLETE
- Include basic orbital simulation 
- Include basic 3D visualization of orbital simulation
- Attitude control continuous time, proportional controller
- Attitude control continuous time, PID controller
- Attitude control continuous time, H_inf controller
- Attitude control continuous time, Kalman filter, varied controllers
- Attitude control discrete time, proportional controller
- Attitude control discrete time, PID controller
- Attitude control discrete time, H_inf controller
- Attitude control discrete time, Kalman filter, varied controllers


Python Component:
Finish MATLAB Simulation/Visualization
...


C/openGL Component:
Set up vertex array objects and formatting COMPLETE
Set up texture mapping and movement in the frame COMPLETE
Generate basic geometries in the system COMPLETE
Rotate using GLM COMPLETE
Translate using GLM COMPLETE
Generate small custom satellite mesh
...


Comprehension:

File: shaderClass.h 
Task: Figure out exactly how the code works as it was found from a youtube video.
Line: std::ifstream in(filename, std::ios::binary); 


File: shaderClass.cpp
Task Figure out exactly how the error management works.
Line: void Shader::compileErrors(unsigned int shader, const char* type) { ... }




Other Additional Considerations:

Start framework for Hill's Dynamics/Clohessy Wiltshire Equations
Determine if it would be reasonable to account for clock timing in the overall control system
Evasion of 2 bodies instead of rendezvous between them
